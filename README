#PUISSANCE 4++



##Principes
Le principe est le même que celui du puissance 4, avec quelques améliorations :
* Gestion de 3 type de pieces
    * Pieces pleines
    * Pieces creuses
    * Pieces bloquantes
* Gestion du jeu à N joueurs (N > 1)
* Matrice de N*M cases (gravite non optionnelle)


##Caractéristiques techniques
###Programmation
* Utilisation du compilateur gcc
    * Moteur de jeu
    * Sauvegarde de partie en cours
    * Sauvegarde de donnees joueurs
    * Scoring

* Utilisation de la SDL lib
    * Modules graphiques & sonores
    * Modules reseaux

* Utilisation de vim simplifiée
    * projet.vim contient l'ouverture automatisé du projet
	    avec la commande 'vim -c so\ projet.vim'

###Dessin
* Utilisation du logiciel Pinta (http://pinta-project.com)
    * Dessin des éléments du jeu pour le module graphique SDL


###Support
* OS
    * Linux (prioritaire)
    * Windows (secondaire)
    * Mac (probablement compatible sans altérations)

* Stockage
    * Serveur git, github.com : https://github.com/Aluriak/Hubosans4


## Etapes du développement
* Etape 1 : moteur du jeu + affichage terminal
    * moteur
	* initialisation et libération mémoire : lucas
	* traitement des actions du jeu : thomas
	* 70%
    * affichage terminal
	* affichage du jeu : lucas
	* entrée utilisateur : thomas
	* 70%
* Etape 2 : gestion scoring et sauvegarde
    * 00%
* Etape 3 : IA
    * IA déterministe : lucas
    * 50%
* Etape 4 : interface graphique et sonore avec la SDL
    * 00%
* Etape 5 : réseau
    * 00%
* Etape 6 : cross platform
    * 00%
* Etape Annexe : Redmine & depot git parallele
    --> Developpement d'un script bash qui automatise la syncro
    * 00%

Etape prioritaire actuelle : 1


### Etape 1
L'étape 1 est la base du projet, puisque le moteur du jeu, définit à cette étape, restera inchangé pour le reste du projet.
L'affichage du jeu dans la sortie standard est également importante puisque utilisable en debuggage.


### Etape 2
Enregistrement des parties à la demande de l'utilisateur


### Etape 3
La seule IA pour le moment traitée est déterministe. 
Elle n'évolue pas, elle identifie juste des situations auxquelles elle réagis automaiquement.
Piste d'évolution : algorithmes in-max et alpha-beta


### Affichage dans le terminal
Exemple d'affichage dans le terminal :

  1  2  3  4  5  6  7
 ----------------------
||  |  |  |  |  |  |  ||
||  |  |  |  |  |  |  ||
||  |  |  |  |  |  |  ||
||  |  |  |  |  |  |  ||
||  |  |  |  |  |  |  ||
||O.|XX|  |  |  |  |  ||
 **********************

Repère utilisé pour les cases :

o-------------> x
|(0;0)(1;0)
|(0;1)(1;1)
|
|
v y  


 
