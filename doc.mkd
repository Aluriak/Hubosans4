# DOCUMENTATION DES MODULES
Plusieurs modules sont utilisés pour ce projet.
La documentation de ces modules est dressée ci-après.

## MOTEUR
 
* void t\_case\_init(t\_case\* t\_case, int x, int y);

	* Initialise la structure
	* Elle prend en paramètre
		* Une matrice
		* Deux int correspondant au nombre de cases en x et en y

* void t\_joueur\_init(t\_joueur \*j, int nbJ, int id, bool ia);

	* Initialise le joueur selon le nombre de joueur initialisé auparavant
	* Elle prend en paramètre
		* Un pointeur sur une structure t_joueur
		* Un int correspondant au nombre de joueurs
		* Un int correspondant à l'id du joueur
		* Un bool pour définir s'il s'agit d'un IA ou pas

* void t\_jeu\_init(t\_jeu\* jeu, short nbjoueurs, short nbIA);

	* Allocation et initialisation de la structure. Le pointeur est NULL en cas d'erreur
	* Elle prend en paramètre
		* Un pointeur sur une structure t_jeu
		* Un short correspondant au nombre de joueur
		* Un short coorespondant au nombre d'IA

* void t\_jeu\_free(t\_jeu\* jeu);

	* Libère le jeu alloué dynamiquement
	* Elle prend en paramètre
		* Une structure de type t_jeu
	

## GRAPHIQUE 
### TERM
Ce module gère l'affichage de la structure de jeu définie dans le module moteur.
Il propose l'affichage du jeu, ainsi que deux fonctions utilitaires pour le 
contrôle des couleurs et de l'affichage dans le terminal, pour un noyau linux.

#### Dépendances
* Modules
    * systeme
    * moteur



#### Méthodes
* void TERM\_afficherJeu(t\_jeu\* jeu);
    * Affichage du jeu dans la sortie standard.
    * Efface le contenu du terminal avec TERM\_clear() avant affichage


* void TERM\_clear();
    * Efface le contenu du terminal (commande clear)
    

* void TERM\_color(int couleur);
    * Configure la couleur de texte du terminal 
    * Un nombre entre 0 et 6 est attendu
    * 0 correspond à la couleur par défaut



### SDL
TODO


## IA
Ce module permet d'utiliser une IA déterministe, basée sur une étude ponctuelle du plateau de jeu.

#### Dépendances
* Modules
    * systeme
    * moteur

#### Méthodes
* void IA\_effectuerTour(t\_jeu \*jeu, t\_joueur\* joueur);
    * lance l'étude du jeu puis fait jouer l'IA selon les résultats

## SYSTEME

* void FLUX\_ERREUR(char\* source, char\* erreur);

	* Affiche dans stderr l'erreur envoyée
	* Elle prend en paramètre
		* Un char correspondant à la source
		* Un char correspondant au message à afficher

* int randN(int N);

	* Renvois un nombre aléatoire entre 0 et N-1 (N > 0)
	* Elle prend un paramètre
		* Un int correspondant au résultat du rand

* int max(int a, int b);

	* Renvois a si a >= b, ou b
	* Elle prend en paramètre 
		* Un int correspondant à la première valeur
		* Un int correspondant à la deuxième valeur

* int tab\_max(int\* tab, int T);

	* Renvois la valeur maximum contenue dans le tableau de taille T
	* Elle prend en paramètre
		* Un pointeur sur un int correspondant au tableau
		* Un int correspondant à la taille du tableau




