# DOCUMENTATION DES MODULES
Plusieurs modules sont utilisés pour ce projet.
La documentation de ces modules est dressée ci-après.

## MOTEUR
Module principal du projet, il gère tout le moteur de jeu.
Il s'interface via les structures d'actions.

#### Dépendances
* Modules
	* systeme

#### Méthodes
* t\_joueur\* MOTEUR\_tourSuivant(t\_jeu\* jeu, t\_action action) { 
	* Effectue tous les calculs pour opérer le tour suivant suivant l'action de l'Oya
	* Elle prend en paramètres
		* l'adresse du jeu à traiter
		* l'action de l'Oya
	* Thomas

* int MOTEUR\_coordPieceJouee(t\_jeu\* jeu, e\_piece piece, int colonne); 
	* renvoit la coordonnée y d'une pièce de type piece lâchée dans la colonne indiquée
	* Elle prend en paramètre
		* l'adresse vers le jeu considéré
		* le type de la pièce lâchée
		* le numéro de la colonne où la pièce est lâchée
	* Lucas

* void t\_case\_init(t\_case\* t\_case, int x, int y);
	* Initialise la structure
	* Elle prend en paramètre
		* l'adresse de la case à initialiser
		* les coordonnées de la case en abscisses(colonnes) puis en ordonnées(lignes)
	* Lucas

* void t\_joueur\_init(t\_joueur \*j, int nbJ, int id, bool ia);
	* Initialise le joueur selon le nombre de joueur initialisé auparavant
	* Elle prend en paramètre
		* l'adresse de la structure t_joueur à initialiser
		* le nombre total de joueur dans le jeu
		* l'id du joueur
		* booléen à vrai si le joueur doit être géré par l'IA
	* Lucas

* void t\_jeu\_init(t\_jeu\* jeu, short nbjoueurs, short nbIA);
	* Allocation et initialisation de la structure t_jeu.
	* Elle prend en paramètre
		* l'adresse de la structure t_jeu à initialiser
		* le nombre total de joueur
		* le nombre d'IA  
	* Lucas

* void t\_jeu\_free(t\_jeu\* jeu);
	* Effectue les libérations de la structure t_jeu, initialisée avec t_jeu_init(3)
	* Elle prend en paramètre
		* l'adresse de la structure à libérer
	* Lucas
	

## GRAPHIQUE 
### TERM
Ce module gère l'affichage de la structure de jeu définie dans le module moteur.
Il propose l'affichage du jeu, ainsi que deux fonctions utilitaires pour le 
contrôle des couleurs et de l'affichage dans le terminal, pour un noyau linux.

#### Dépendances
* Modules
	* systeme
	* moteur

#### Méthodes
* t\_jeu\* TERM\_AfficherMenu();
	* Affichage du menu dans la sortie standard
	* Renvois une structure de jeu initialisée selon les choix de l'utilisateur dans le menu
	* Lucas

* void TERM\_afficherJeu(t\_jeu\* jeu);
	* Affichage du jeu dans la sortie standard.
	* Efface le contenu du terminal avec TERM\_clear() avant affichage   
	* Elle prend en paramètre
		* l'adresse du jeu à afficher
	* Lucas

* t\_action TERM\_entreeUtilisateur(t\_jeu \*jeu); 	
	* Gère la demande à l'utilisateur pour créer une action, traitable par le moteur
	* Elle prend en paramètre
		* l'adresse du jeu
	* Thomas

* void TERM\_clear();
	* Efface le contenu du terminal (commande clear)   
	* Lucas
    

* void TERM\_color(int couleur);
	* Configure la couleur de texte du terminal 
		* Un nombre entre 0 et 6 est attendu
		* 0 correspond à la couleur par défaut   
	* Elle prend en paramètre
		* la couleur à afficher (entre 0 et 6)
	* Lucas



### SDL
#### Dépendances
* Modules
	* systeme
	* moteur

#### Méthodes
* void SDL\_afficherJeu(t\_jeu\* jeu, SDL_Surface* ecran);
	* Affichage du jeu dans la SDL_Surface envoyée.
	* Efface le contenu de l'écran avant affichage   
	* Elle prend en paramètre
		* l'adresse du jeu à afficher
		* l'adresse de la SDL_Surface correspondant à l'écran	
	* Lucas (en cours)


## IA
Ce module permet d'utiliser une IA déterministe, basée sur une étude ponctuelle du plateau de jeu.

#### Dépendances
* Modules
	* systeme
	* moteur

#### Méthodes
* t\_action IA\_effectuerTour(t\_jeu \*jeu, t\_joueur\* joueur);
	* lance l'étude du jeu puis fait jouer l'IA selon les résultats
	* retourne l'action choisie par l'IA
	* Elle prend en paramètre
		* l'adresse du jeu à étudier
		* l'adresse du joueur qu'elle incarne
	* Lucas



## SYSTEME

* void FLUX\_ERREUR(char\* source, char\* erreur);
	* Affiche dans stderr l'erreur envoyée
	* Elle prend en paramètre
		* Un char correspondant à la source
		* Un char correspondant au message à afficher
	* Lucas

* int randN(int N);
	* Renvois un nombre aléatoire entre 0 et N-1 (N > 0)
	* Elle prend en paramètre
		* La valeur maximum renvoyée
	* Lucas

* int max(int a, int b);
	* Renvois la plus grande des deux valeurs
	* Elle prend en paramètre 
		* Un int correspondant à la première valeur
		* Un int correspondant à la deuxième valeur
	* Lucas

* int tab\_max(int\* tab, int T);
	* Renvois la valeur maximum contenue dans le tableau de taille T
	* Elle prend en paramètre
		* l'adresse du tableau à étudier
		* la taille du tableau
	* Lucas

* int str2int(char\* str, int nb\_carac);
	* Renvois un entier positif basé sur la lecture des nb\_carac premier caractères de la string
	* Elle prend en paramètres 
		* la chaîne à étudier
		* le nombre de caractère à considérer



